{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.10.11", "generated_at": "2025-09-13T05:13:58.148869Z", "invocation_id": "5884dc2b-3066-4bda-a2ee-2b279408fade", "invocation_started_at": "2025-09-13T05:13:52.249376Z", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-13T05:13:57.797809Z", "completed_at": "2025-09-13T05:13:57.809480Z"}, {"name": "execute", "started_at": "2025-09-13T05:13:57.809958Z", "completed_at": "2025-09-13T05:13:57.809973Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013214111328125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowflake_finops.stg_query_history", "compiled": true, "compiled_code": "\n\nwith source as (\n    select *\n    from SNOWFLAKE.ACCOUNT_USAGE.QUERY_HISTORY\n    where START_TIME >= dateadd('day', -30, current_date())\n    \n      and date(END_TIME) >= (\n          select coalesce(max(t.usage_date), '1900-01-01'::date)\n          from DM_AE_FINOPS_DB.STG.stg_query_history as t\n      )\n    \n),\n\ntransformed as (\n    select\n        -- Keys & time\n        QUERY_ID                                           as query_id,\n        cast(date_trunc('day', START_TIME) as date)        as usage_date,\n        START_TIME,\n        END_TIME,\n\n        -- Who/where\n        USER_NAME       as user_name,\n        ROLE_NAME       as role_name,\n        WAREHOUSE_NAME  as warehouse_name,\n        WAREHOUSE_SIZE  as warehouse_size,\n\n        -- What\n        QUERY_TYPE      as query_type,\n        DATABASE_NAME   as database_name,\n        SCHEMA_NAME     as schema_name,\n        EXECUTION_STATUS,\n        BYTES_SCANNED,\n        ROWS_PRODUCED,\n        TOTAL_ELAPSED_TIME as total_elapsed_ms,\n        EXECUTION_TIME     as execution_ms,\n\n        -- Convenience fields\n        BYTES_SCANNED / 1024 / 1024 / 1024.0 as gb_scanned,\n        TOTAL_ELAPSED_TIME / 1000.0          as total_elapsed_seconds,\n\n        case\n            when TOTAL_ELAPSED_TIME > 600000 then 'long_running'   -- > 10 min\n            when TOTAL_ELAPSED_TIME > 60000  then 'medium_running' -- > 1 min\n            else 'fast'\n        end as runtime_category,\n\n        current_timestamp() as _loaded_at\n    from source\n    where EXECUTION_STATUS = 'SUCCESS'\n      and WAREHOUSE_NAME is not null   -- only compute-bearing statements\n)\n\nselect * from transformed", "relation_name": "DM_AE_FINOPS_DB.STG.stg_query_history", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-13T05:13:57.812248Z", "completed_at": "2025-09-13T05:13:57.819968Z"}, {"name": "execute", "started_at": "2025-09-13T05:13:57.820457Z", "completed_at": "2025-09-13T05:13:57.820466Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009266376495361328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowflake_finops.stg_warehouse_metering", "compiled": true, "compiled_code": "\n\n-- Authoritative (ACCOUNT_USAGE) or Demo overlay via macro\nwith source as (\n    select *\n    from \n    SNOWFLAKE.ACCOUNT_USAGE.WAREHOUSE_METERING_HISTORY\n  \n    where START_TIME >= dateadd('day', -30, current_date())\n    \n      and date(END_TIME) >= (\n          select coalesce(max(t.usage_date), '1900-01-01'::date)\n          from DM_AE_FINOPS_DB.STG.stg_warehouse_metering as t\n      )\n    \n),\n\n-- Normalize and add cost ($ = credits * cost_per_credit)\nnormalized as (\n    select\n        -- keys & time (ACCOUNT_USAGE is LTZ; preserve LTZ for consistency)\n        date_trunc('hour', START_TIME)              as hour_start,\n        date_trunc('hour', END_TIME)                as hour_end,\n        cast(date_trunc('day', START_TIME) as date) as usage_date,\n\n        -- warehouse\n        WAREHOUSE_ID,\n        WAREHOUSE_NAME,\n\n        -- credits (ACCOUNT_USAGE-compatible column names)\n        CREDITS_USED                       as total_credits_used,\n        CREDITS_USED_COMPUTE               as credits_used_compute,\n        CREDITS_USED_CLOUD_SERVICES        as credits_used_cloud_services,\n\n        -- dollars (authoritative)\n        (CREDITS_USED * 3.0)                as total_cost_usd,\n        (CREDITS_USED_COMPUTE * 3.0)        as compute_cost_usd,\n        (CREDITS_USED_CLOUD_SERVICES * 3.0) as cloud_services_cost_usd,\n\n        -- stable unique key per warehouse-hour\n        concat_ws('|', WAREHOUSE_ID::string, to_char(END_TIME, 'YYYY-MM-DD HH24:MI:SS')) as metering_id,\n\n        -- cast to ntz for stability downstream\n        cast(current_timestamp() as timestamp_ntz) as _loaded_at\n    from source\n)\n\nselect\n    hour_start,\n    hour_end,\n    usage_date,\n    WAREHOUSE_ID   as warehouse_id,\n    WAREHOUSE_NAME as warehouse_name,\n    total_credits_used,\n    credits_used_compute,\n    credits_used_cloud_services,\n    compute_cost_usd,\n    cloud_services_cost_usd,\n    (total_cost_usd - compute_cost_usd) as idle_cost_usd, -- informational; equals cloud_services_cost_usd\n    total_cost_usd,\n    metering_id,\n    _loaded_at\nfrom normalized", "relation_name": "DM_AE_FINOPS_DB.STG.stg_warehouse_metering", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-13T05:13:57.822737Z", "completed_at": "2025-09-13T05:13:57.824514Z"}, {"name": "execute", "started_at": "2025-09-13T05:13:57.824974Z", "completed_at": "2025-09-13T05:13:57.824983Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.003269195556640625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.snowflake_finops.budget_daily", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-13T05:13:57.827106Z", "completed_at": "2025-09-13T05:13:57.828717Z"}, {"name": "execute", "started_at": "2025-09-13T05:13:57.829194Z", "completed_at": "2025-09-13T05:13:57.829204Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.003068685531616211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.snowflake_finops.department_mapping", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-13T05:13:57.831504Z", "completed_at": "2025-09-13T05:13:57.836997Z"}, {"name": "execute", "started_at": "2025-09-13T05:13:57.837486Z", "completed_at": "2025-09-13T05:13:57.837496Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007086277008056641, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowflake_finops.int_hourly_compute_costs", "compiled": true, "compiled_code": "\n\nwith metering as (\n    select * from DM_AE_FINOPS_DB.STG.stg_warehouse_metering\n    \n        where hour_start > (select max(hour_start) from DM_AE_FINOPS_DB.STG.int_hourly_compute_costs)\n    \n),\n\nqueries as (\n    select \n        warehouse_name,\n        date_trunc('hour', START_TIME) as usage_hour,\n        count(*) as query_count,\n        sum(total_elapsed_seconds) as total_runtime_seconds,\n        sum(gb_scanned) as total_gb_scanned,\n        count(distinct user_name) as unique_users\n    from DM_AE_FINOPS_DB.STG.stg_query_history\n    \n        where date_trunc('hour', END_TIME) >= (\n            select coalesce(max(t.hour_start), '1900-01-01'::timestamp)\n            from DM_AE_FINOPS_DB.STG.int_hourly_compute_costs as t\n        )\n    \n    group by 1, 2\n),\n\nhourly_costs as (\n    select\n        m.hour_start,\n        m.hour_end,\n        m.usage_date,\n        m.warehouse_name,\n        \n        -- Actual costs from metering (authoritative)\n        m.total_credits_used,\n        m.total_cost_usd,\n        m.compute_cost_usd,\n        m.cloud_services_cost_usd,\n        \n        -- Query activity in this hour\n        coalesce(q.query_count, 0) as queries_executed,\n        coalesce(q.total_runtime_seconds, 0) as total_runtime_seconds,\n        coalesce(q.total_gb_scanned, 0) as gb_scanned,\n        coalesce(q.unique_users, 0) as unique_users,\n        \n        -- Efficiency metrics\n        case \n            when q.query_count > 0 then m.total_cost_usd / q.query_count\n            else null\n        end as avg_cost_per_query,\n        \n        case\n            when q.total_runtime_seconds > 0 then m.total_cost_usd / (q.total_runtime_seconds / 3600.0)\n            else null\n        end as cost_per_runtime_hour,\n        \n        -- Idle detection (no queries but credits consumed)\n        case \n            when coalesce(q.query_count, 0) = 0 and m.total_credits_used > 0 then true\n            else false\n        end as is_potentially_idle,\n        \n        case \n            when coalesce(q.query_count, 0) = 0 and m.total_credits_used > 0 \n            then m.total_cost_usd\n            else 0\n        end as idle_cost_usd,\n        \n        -- Composite key\n        md5(cast(coalesce(cast(m.warehouse_name as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(m.hour_start as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as cost_hour_key,\n        \n        current_timestamp() as _loaded_at\n        \n    from metering m\n    left join queries q\n        on m.warehouse_name = q.warehouse_name\n       and m.hour_start    = q.usage_hour\n)\n\nselect * from hourly_costs", "relation_name": "DM_AE_FINOPS_DB.STG.int_hourly_compute_costs", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-13T05:13:57.839669Z", "completed_at": "2025-09-13T05:13:57.842861Z"}, {"name": "execute", "started_at": "2025-09-13T05:13:57.843373Z", "completed_at": "2025-09-13T05:13:57.843382Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004763364791870117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowflake_finops.monitor_freshness_check", "compiled": true, "compiled_code": "\n\nselect max(hour_end) as last_end_time\nfrom DM_AE_FINOPS_DB.STG.stg_warehouse_metering", "relation_name": "DM_AE_FINOPS_DB.STG.monitor_freshness_check", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-13T05:13:57.845534Z", "completed_at": "2025-09-13T05:13:57.848644Z"}, {"name": "execute", "started_at": "2025-09-13T05:13:57.849127Z", "completed_at": "2025-09-13T05:13:57.849136Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004636526107788086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowflake_finops.dim_department", "compiled": true, "compiled_code": "\n\nselect\n    upper(trim(warehouse_name)) as warehouse_name,\n    trim(department) as department\nfrom DM_AE_FINOPS_DB.STG.department_mapping", "relation_name": "DM_AE_FINOPS_DB.STG.dim_department", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-13T05:13:57.851431Z", "completed_at": "2025-09-13T05:13:57.855566Z"}, {"name": "execute", "started_at": "2025-09-13T05:13:57.856016Z", "completed_at": "2025-09-13T05:13:57.856026Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005787849426269531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowflake_finops.fct_daily_costs", "compiled": true, "compiled_code": "\n\nwith compute_costs as (\n    select\n        usage_date,\n        warehouse_name,\n\n        -- Rollups from authoritative hourly costs\n        sum(total_credits_used)         as compute_credits,\n        sum(compute_cost_usd)           as compute_cost,\n        sum(cloud_services_cost_usd)    as cloud_services_cost,\n        sum(total_cost_usd)             as total_cost,\n\n        -- Existing signals\n        sum(idle_cost_usd)              as idle_cost,\n        sum(queries_executed)           as total_queries,\n        avg(unique_users)               as avg_concurrent_users\n    from DM_AE_FINOPS_DB.STG.int_hourly_compute_costs\n    group by 1, 2\n),\n\ndaily_summary as (\n    select\n        -- Contract-friendly explicit types\n        usage_date::date                                   as usage_date,\n        warehouse_name::varchar                            as warehouse_name,\n\n        compute_credits::number(38,3)                      as compute_credits,\n        compute_cost::number(38,2)                         as compute_cost,\n        cloud_services_cost::number(38,2)                  as cloud_services_cost,\n        total_cost::number(38,2)                           as total_cost,\n\n        idle_cost::number(38,2)                            as idle_cost,\n        (compute_cost - idle_cost)::number(38,2)           as productive_cost,\n\n        total_queries::number(38,0)                        as total_queries,\n        avg_concurrent_users::number(38,2)                 as avg_concurrent_users,\n\n        case when total_queries > 0\n             then (compute_cost / nullif(total_queries,0))::number(38,4)\n        end                                                as cost_per_query,\n\n        case when compute_cost > 0\n             then (100 * (1 - (idle_cost / nullif(compute_cost,0))))::number(5,2)\n             else 100::number(5,2)\n        end                                                as efficiency_score,\n\n        -- Use TOTAL for running/MA signals (holistic)\n        sum(total_cost) over (\n            partition by date_trunc('month', usage_date), warehouse_name\n            order by usage_date\n        )::number(38,2)                                    as month_to_date_cost,\n\n        avg(total_cost) over (\n            partition by warehouse_name\n            order by usage_date\n            rows between 6 preceding and current row\n        )::number(38,2)                                    as cost_7day_avg,\n\n        (total_cost - lag(total_cost, 1) over (\n            partition by warehouse_name order by usage_date\n        ))::number(38,2)                                   as day_over_day_change,\n\n        (total_cost - lag(total_cost, 7) over (\n            partition by warehouse_name order by usage_date\n        ))::number(38,2)                                   as week_over_week_change\n\n    from compute_costs\n)\n\nselect\n    *,\n    md5(cast(coalesce(cast(usage_date as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(warehouse_name as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as daily_cost_key,\n    cast(current_timestamp() as timestamp_ntz) as _loaded_at\nfrom daily_summary", "relation_name": "DM_AE_FINOPS_DB.STG.fct_daily_costs", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-13T05:13:57.858626Z", "completed_at": "2025-09-13T05:13:57.863008Z"}, {"name": "execute", "started_at": "2025-09-13T05:13:57.863498Z", "completed_at": "2025-09-13T05:13:57.863506Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005891323089599609, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowflake_finops.fct_budget_vs_actual", "compiled": true, "compiled_code": "\n\nselect\n    b.date as usage_date,\n    b.budget_usd,\n    coalesce(f.total_cost, 0) as actual_cost_usd\nfrom DM_AE_FINOPS_DB.STG.budget_daily b\nleft join (\n    select usage_date, sum(compute_cost + idle_cost) as total_cost\n    from DM_AE_FINOPS_DB.STG.fct_daily_costs\n    group by 1\n) f\n  on f.usage_date = b.date\norder by 1", "relation_name": "DM_AE_FINOPS_DB.STG.fct_budget_vs_actual", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-13T05:13:57.865638Z", "completed_at": "2025-09-13T05:13:57.868928Z"}, {"name": "execute", "started_at": "2025-09-13T05:13:57.869410Z", "completed_at": "2025-09-13T05:13:57.869417Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00480961799621582, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowflake_finops.fct_cost_by_department", "compiled": true, "compiled_code": "\n\nwith base as (\n    select\n        f.usage_date,\n        coalesce(nullif(trim(m.department), ''), 'Unassigned') as department,\n        f.warehouse_name,\n        f.compute_cost as compute_cost_usd,\n        f.idle_cost     as idle_cost_usd,\n        (f.compute_cost + f.idle_cost) as total_cost_usd\n    from DM_AE_FINOPS_DB.STG.fct_daily_costs f\n    left join DM_AE_FINOPS_DB.STG.department_mapping m\n      on upper(f.warehouse_name) = upper(m.warehouse_name)\n)\nselect\n    usage_date,\n    department,\n    sum(compute_cost_usd) as compute_cost_usd,\n    sum(idle_cost_usd)    as idle_cost_usd,\n    sum(total_cost_usd)   as total_cost_usd\nfrom base\ngroup by 1, 2", "relation_name": "DM_AE_FINOPS_DB.STG.fct_cost_by_department", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-13T05:13:57.871552Z", "completed_at": "2025-09-13T05:13:57.874537Z"}, {"name": "execute", "started_at": "2025-09-13T05:13:57.874996Z", "completed_at": "2025-09-13T05:13:57.875005Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0045318603515625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowflake_finops.fct_cost_trend", "compiled": true, "compiled_code": "\n\nselect\n    usage_date,\n    sum(compute_cost) as compute_cost_usd,\n    sum(idle_cost)    as idle_cost_usd,\n    sum(compute_cost + idle_cost) as total_cost_usd\nfrom DM_AE_FINOPS_DB.STG.fct_daily_costs\ngroup by 1\norder by 1", "relation_name": "DM_AE_FINOPS_DB.STG.fct_cost_trend", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-13T05:13:57.877385Z", "completed_at": "2025-09-13T05:13:57.881771Z"}, {"name": "execute", "started_at": "2025-09-13T05:13:57.882257Z", "completed_at": "2025-09-13T05:13:57.882264Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006023883819580078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_finops.dbt_expectations_expect_column_values_to_be_between_fct_daily_costs_compute_cost__0.27c452adce", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and compute_cost >= 0\n)\n as expression\n\n\n    from DM_AE_FINOPS_DB.STG.fct_daily_costs\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-13T05:13:57.884453Z", "completed_at": "2025-09-13T05:13:57.888647Z"}, {"name": "execute", "started_at": "2025-09-13T05:13:57.889153Z", "completed_at": "2025-09-13T05:13:57.889161Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005777835845947266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_finops.dbt_expectations_expect_column_values_to_be_between_fct_daily_costs_idle_cost__0.63ad1ff7b4", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and idle_cost >= 0\n)\n as expression\n\n\n    from DM_AE_FINOPS_DB.STG.fct_daily_costs\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-13T05:13:57.891335Z", "completed_at": "2025-09-13T05:13:57.899366Z"}, {"name": "execute", "started_at": "2025-09-13T05:13:57.899835Z", "completed_at": "2025-09-13T05:13:57.899842Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009556770324707031, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_finops.not_null_fct_daily_costs_usage_date.a508445774", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect usage_date\nfrom DM_AE_FINOPS_DB.STG.fct_daily_costs\nwhere usage_date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-13T05:13:57.902058Z", "completed_at": "2025-09-13T05:13:57.906899Z"}, {"name": "execute", "started_at": "2025-09-13T05:13:57.907382Z", "completed_at": "2025-09-13T05:13:57.907390Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006417274475097656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_finops.relationships_fct_daily_costs_warehouse_name__warehouse_name__ref_stg_warehouse_metering_.bdcce88074", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select warehouse_name as from_field\n    from DM_AE_FINOPS_DB.STG.fct_daily_costs\n    where warehouse_name is not null\n),\n\nparent as (\n    select warehouse_name as to_field\n    from DM_AE_FINOPS_DB.STG.stg_warehouse_metering\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-13T05:13:57.909560Z", "completed_at": "2025-09-13T05:13:57.916815Z"}, {"name": "execute", "started_at": "2025-09-13T05:13:57.917291Z", "completed_at": "2025-09-13T05:13:57.917298Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008801698684692383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_finops.unique_fct_daily_costs_daily_cost_key.745882193a", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    daily_cost_key as unique_field,\n    count(*) as n_records\n\nfrom DM_AE_FINOPS_DB.STG.fct_daily_costs\nwhere daily_cost_key is not null\ngroup by daily_cost_key\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}], "elapsed_time": 2.5404834747314453, "args": {"log_file_max_bytes": 10485760, "log_format": "default", "macro_debugging": false, "show_resource_report": false, "show_all_deprecations": false, "cache_selected_only": false, "log_path": "/home/runner/work/finops-dbt/finops-dbt/logs", "require_all_warnings_handled_by_warn_error": false, "require_generic_test_arguments_property": true, "send_anonymous_usage_stats": true, "favor_state": false, "require_yaml_configuration_for_mf_time_spines": false, "strict_mode": false, "write_json": true, "empty_catalog": false, "static_parser": true, "log_format_file": "debug", "defer": false, "source_freshness_run_project_hooks": true, "log_level_file": "debug", "quiet": false, "require_batched_execution_for_custom_microbatch_strategy": false, "project_dir": "/home/runner/work/finops-dbt/finops-dbt", "skip_nodes_if_on_run_start_fails": false, "introspect": true, "log_level": "info", "partial_parse": true, "target_path": "target/base", "warn_error_options": {"error": [], "warn": [], "silence": []}, "static": false, "require_explicit_package_overrides_for_builtin_materializations": true, "select": [], "state_modified_compare_vars": false, "vars": {"enable_pro_pack": false, "DEMO_MODE": false}, "which": "generate", "use_colors_file": true, "populate_cache": true, "indirect_selection": "eager", "print": true, "invocation_command": "dbt docs generate --target prod --target-path target/base --vars {\"enable_pro_pack\": false, \"DEMO_MODE\": false} --exclude tag:backlog --exclude source:account_usage_backlog --exclude fqn:metering_demo_seed,resource_type:seed --exclude fqn:metering_overlay,resource_type:model", "printer_width": 80, "profiles_dir": "./.ci/profiles", "require_nested_cumulative_type_params": false, "state_modified_compare_more_unrendered_values": false, "require_resource_names_without_spaces": true, "validate_macro_args": false, "partial_parse_file_diff": true, "target": "prod", "version_check": true, "upload_to_artifacts_ingest_api": false, "use_colors": true, "compile": true, "use_fast_test_edges": false, "exclude": ["tag:backlog", "source:account_usage_backlog", "fqn:metering_demo_seed,resource_type:seed", "fqn:metering_overlay,resource_type:model"]}}