{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.10.11", "generated_at": "2025-09-11T07:29:08.902048Z", "invocation_id": "fb9121e0-c61b-4f26-a737-883d91e75b40", "invocation_started_at": "2025-09-11T07:29:03.813567Z", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-11T07:29:08.164415Z", "completed_at": "2025-09-11T07:29:08.175978Z"}, {"name": "execute", "started_at": "2025-09-11T07:29:08.176472Z", "completed_at": "2025-09-11T07:29:08.176487Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01310420036315918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowflake_finops.stg_query_history", "compiled": true, "compiled_code": "\n\nwith source as (\n    select *\n    from SNOWFLAKE.ACCOUNT_USAGE.QUERY_HISTORY\n    where START_TIME >= dateadd('day', -90, current_date())\n    \n      and date(END_TIME) >= (\n          select coalesce(max(t.usage_date), '1900-01-01'::date)\n          from DM_AE_FINOPS_DB.STG.stg_query_history as t\n      )\n    \n),\n\ntransformed as (\n    select\n        -- Keys & time\n        QUERY_ID                                           as query_id,\n        cast(date_trunc('day', START_TIME) as date)        as usage_date,\n        START_TIME,\n        END_TIME,\n\n        -- Who/where\n        USER_NAME       as user_name,\n        ROLE_NAME       as role_name,\n        WAREHOUSE_NAME  as warehouse_name,\n        WAREHOUSE_SIZE  as warehouse_size,\n\n        -- What\n        QUERY_TYPE      as query_type,\n        DATABASE_NAME   as database_name,\n        SCHEMA_NAME     as schema_name,\n        EXECUTION_STATUS,\n        BYTES_SCANNED,\n        ROWS_PRODUCED,\n        TOTAL_ELAPSED_TIME as total_elapsed_ms,\n        EXECUTION_TIME     as execution_ms,\n\n        -- Convenience fields\n        BYTES_SCANNED / 1024 / 1024 / 1024.0 as gb_scanned,\n        TOTAL_ELAPSED_TIME / 1000.0          as total_elapsed_seconds,\n\n        case\n            when TOTAL_ELAPSED_TIME > 600000 then 'long_running'   -- > 10 min\n            when TOTAL_ELAPSED_TIME > 60000  then 'medium_running' -- > 1 min\n            else 'fast'\n        end as runtime_category,\n\n        current_timestamp() as _loaded_at\n    from source\n    where EXECUTION_STATUS = 'SUCCESS'\n      and WAREHOUSE_NAME is not null   -- only compute-bearing statements\n)\n\nselect * from transformed", "relation_name": "DM_AE_FINOPS_DB.STG.stg_query_history", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-11T07:29:08.178664Z", "completed_at": "2025-09-11T07:29:08.185342Z"}, {"name": "execute", "started_at": "2025-09-11T07:29:08.185826Z", "completed_at": "2025-09-11T07:29:08.185836Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008163690567016602, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowflake_finops.stg_warehouse_metering", "compiled": true, "compiled_code": "\n\n-- Authoritative (ACCOUNT_USAGE) or Demo overlay via macro\nwith source as (\n    select *\n    from \n    SNOWFLAKE.ACCOUNT_USAGE.WAREHOUSE_METERING_HISTORY\n  \n    where START_TIME >= dateadd('day', -90, current_date())\n    \n      and date(END_TIME) >= (\n          select coalesce(max(t.usage_date), '1900-01-01'::date)\n          from DM_AE_FINOPS_DB.STG.stg_warehouse_metering as t\n      )\n    \n),\n\n-- Normalize and add cost ($ = credits * cost_per_credit)\nnormalized as (\n    select\n        -- keys & time (ACCOUNT_USAGE is LTZ; preserve LTZ for consistency)\n        date_trunc('hour', START_TIME)              as hour_start,\n        date_trunc('hour', END_TIME)                as hour_end,\n        cast(date_trunc('day', START_TIME) as date) as usage_date,\n\n        -- warehouse\n        WAREHOUSE_ID,\n        WAREHOUSE_NAME,\n\n        -- credits (ACCOUNT_USAGE-compatible column names)\n        CREDITS_USED                       as total_credits_used,\n        CREDITS_USED_COMPUTE               as credits_used_compute,\n        CREDITS_USED_CLOUD_SERVICES        as credits_used_cloud_services,\n\n        -- dollars (authoritative)\n        (CREDITS_USED * 3.00)                as total_cost_usd,\n        (CREDITS_USED_COMPUTE * 3.00)        as compute_cost_usd,\n        (CREDITS_USED_CLOUD_SERVICES * 3.00) as cloud_services_cost_usd,\n\n        -- stable unique key per warehouse-hour\n        concat_ws('|', WAREHOUSE_ID::string, to_char(END_TIME, 'YYYY-MM-DD HH24:MI:SS')) as metering_id,\n\n        -- cast to ntz for stability downstream\n        cast(current_timestamp() as timestamp_ntz) as _loaded_at\n    from source\n)\n\nselect\n    hour_start,\n    hour_end,\n    usage_date,\n    WAREHOUSE_ID   as warehouse_id,\n    WAREHOUSE_NAME as warehouse_name,\n    total_credits_used,\n    credits_used_compute,\n    credits_used_cloud_services,\n    compute_cost_usd,\n    cloud_services_cost_usd,\n    (total_cost_usd - compute_cost_usd) as idle_cost_usd, -- informational; equals cloud_services_cost_usd\n    total_cost_usd,\n    metering_id,\n    _loaded_at\nfrom normalized", "relation_name": "DM_AE_FINOPS_DB.STG.stg_warehouse_metering", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-11T07:29:08.188120Z", "completed_at": "2025-09-11T07:29:08.192988Z"}, {"name": "execute", "started_at": "2025-09-11T07:29:08.193461Z", "completed_at": "2025-09-11T07:29:08.193471Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006546974182128906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowflake_finops_pro.stg_automatic_clustering_history", "compiled": true, "compiled_code": "\n\nwith src as (\n    select\n        DATABASE_NAME,\n        SCHEMA_NAME,\n        TABLE_NAME,\n        START_TIME,\n        CREDITS_USED\n    from SNOWFLAKE.ACCOUNT_USAGE.AUTOMATIC_CLUSTERING_HISTORY\n    where START_TIME >= dateadd('day', -90, current_date())\n    \n      and date(START_TIME) >= (\n          select coalesce(max(date(START_TIME)), '1900-01-01'::date)\n          from DM_AE_FINOPS_DB.STG.stg_automatic_clustering_history\n      )\n    \n),\n\nfiltered as (\n    select\n        DATABASE_NAME     as database_name,\n        SCHEMA_NAME       as schema_name,\n        TABLE_NAME        as table_name,\n        START_TIME        as start_time,\n        CREDITS_USED      as credits_used,\n        coalesce(DATABASE_NAME,'') || '|' ||\n        coalesce(SCHEMA_NAME,'')  || '|' ||\n        coalesce(TABLE_NAME,'')   || '|' ||\n        to_char(START_TIME, 'YYYY-MM-DD HH24:MI:SS') as ac_key,\n        cast(current_timestamp() as timestamp_ntz)   as _loaded_at\n    from src\n    where CREDITS_USED > 0\n      and DATABASE_NAME is not null\n      and SCHEMA_NAME   is not null\n      and TABLE_NAME    is not null\n)\n\nselect * from filtered", "relation_name": "DM_AE_FINOPS_DB.STG.stg_automatic_clustering_history", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-11T07:29:08.195659Z", "completed_at": "2025-09-11T07:29:08.415956Z"}, {"name": "execute", "started_at": "2025-09-11T07:29:08.416446Z", "completed_at": "2025-09-11T07:29:08.416462Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.22185325622558594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowflake_finops_pro.stg_warehouse_events_history", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\nwith src as (\n  select\n    warehouse_name,\n\n    /* normalize to event_type */\n     event_name as event_type\n    ,\n\n    /* normalize to event_ts */\n     \"TIMESTAMP\"\n     as event_ts\n\n  from SNOWFLAKE.ACCOUNT_USAGE.WAREHOUSE_EVENTS_HISTORY\n  \n    where\n       \"TIMESTAMP\"\n      \n      >= dateadd('day', - ( 30 )::int, current_timestamp())\n  \n)\n\nselect warehouse_name, event_type, event_ts\nfrom src", "relation_name": "DM_AE_FINOPS_DB.STG.stg_warehouse_events_history", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-11T07:29:08.418597Z", "completed_at": "2025-09-11T07:29:08.422229Z"}, {"name": "execute", "started_at": "2025-09-11T07:29:08.422714Z", "completed_at": "2025-09-11T07:29:08.422723Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005120754241943359, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.snowflake_finops.budget_daily", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-11T07:29:08.424784Z", "completed_at": "2025-09-11T07:29:08.426344Z"}, {"name": "execute", "started_at": "2025-09-11T07:29:08.426917Z", "completed_at": "2025-09-11T07:29:08.426927Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.003126859664916992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.snowflake_finops.department_mapping", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-11T07:29:08.429324Z", "completed_at": "2025-09-11T07:29:08.430907Z"}, {"name": "execute", "started_at": "2025-09-11T07:29:08.431350Z", "completed_at": "2025-09-11T07:29:08.431374Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0031480789184570312, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.snowflake_finops.metering_demo_seed", "compiled": null, "compiled_code": null, "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-11T07:29:08.433519Z", "completed_at": "2025-09-11T07:29:08.439112Z"}, {"name": "execute", "started_at": "2025-09-11T07:29:08.439585Z", "completed_at": "2025-09-11T07:29:08.439594Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007041215896606445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowflake_finops.int_hourly_compute_costs", "compiled": true, "compiled_code": "\n\nwith metering as (\n    select * from DM_AE_FINOPS_DB.STG.stg_warehouse_metering\n    \n        where hour_start > (select max(hour_start) from DM_AE_FINOPS_DB.STG.int_hourly_compute_costs)\n    \n),\n\nqueries as (\n    select \n        warehouse_name,\n        date_trunc('hour', START_TIME) as usage_hour,\n        count(*) as query_count,\n        sum(total_elapsed_seconds) as total_runtime_seconds,\n        sum(gb_scanned) as total_gb_scanned,\n        count(distinct user_name) as unique_users\n    from DM_AE_FINOPS_DB.STG.stg_query_history\n    \n        where date_trunc('hour', END_TIME) >= (\n            select coalesce(max(t.hour_start), '1900-01-01'::timestamp)\n            from DM_AE_FINOPS_DB.STG.int_hourly_compute_costs as t\n        )\n    \n    group by 1, 2\n),\n\nhourly_costs as (\n    select\n        m.hour_start,\n        m.hour_end,\n        m.usage_date,\n        m.warehouse_name,\n        \n        -- Actual costs from metering (authoritative)\n        m.total_credits_used,\n        m.total_cost_usd,\n        m.compute_cost_usd,\n        m.cloud_services_cost_usd,\n        \n        -- Query activity in this hour\n        coalesce(q.query_count, 0) as queries_executed,\n        coalesce(q.total_runtime_seconds, 0) as total_runtime_seconds,\n        coalesce(q.total_gb_scanned, 0) as gb_scanned,\n        coalesce(q.unique_users, 0) as unique_users,\n        \n        -- Efficiency metrics\n        case \n            when q.query_count > 0 then m.total_cost_usd / q.query_count\n            else null\n        end as avg_cost_per_query,\n        \n        case\n            when q.total_runtime_seconds > 0 then m.total_cost_usd / (q.total_runtime_seconds / 3600.0)\n            else null\n        end as cost_per_runtime_hour,\n        \n        -- Idle detection (no queries but credits consumed)\n        case \n            when coalesce(q.query_count, 0) = 0 and m.total_credits_used > 0 then true\n            else false\n        end as is_potentially_idle,\n        \n        case \n            when coalesce(q.query_count, 0) = 0 and m.total_credits_used > 0 \n            then m.total_cost_usd\n            else 0\n        end as idle_cost_usd,\n        \n        -- Composite key\n        md5(cast(coalesce(cast(m.warehouse_name as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(m.hour_start as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as cost_hour_key,\n        \n        current_timestamp() as _loaded_at\n        \n    from metering m\n    left join queries q\n        on m.warehouse_name = q.warehouse_name\n       and m.hour_start    = q.usage_hour\n)\n\nselect * from hourly_costs", "relation_name": "DM_AE_FINOPS_DB.STG.int_hourly_compute_costs", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-11T07:29:08.441796Z", "completed_at": "2025-09-11T07:29:08.444908Z"}, {"name": "execute", "started_at": "2025-09-11T07:29:08.445515Z", "completed_at": "2025-09-11T07:29:08.445523Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004774808883666992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowflake_finops.monitor_freshness_check", "compiled": true, "compiled_code": "\n\nselect max(hour_end) as last_end_time\nfrom DM_AE_FINOPS_DB.STG.stg_warehouse_metering", "relation_name": "DM_AE_FINOPS_DB.STG.monitor_freshness_check", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-11T07:29:08.447617Z", "completed_at": "2025-09-11T07:29:08.451868Z"}, {"name": "execute", "started_at": "2025-09-11T07:29:08.452325Z", "completed_at": "2025-09-11T07:29:08.452332Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0057163238525390625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_finops_pro.dbt_expectations_expect_column_values_to_be_between_stg_automatic_clustering_history_credits_used__0.bcc01b00e5", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and credits_used >= 0\n)\n as expression\n\n\n    from DM_AE_FINOPS_DB.STG.stg_automatic_clustering_history\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-11T07:29:08.454444Z", "completed_at": "2025-09-11T07:29:08.462381Z"}, {"name": "execute", "started_at": "2025-09-11T07:29:08.462835Z", "completed_at": "2025-09-11T07:29:08.462842Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009393453598022461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_finops_pro.not_null_stg_automatic_clustering_history_database_name.ee48f0420f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect database_name\nfrom DM_AE_FINOPS_DB.STG.stg_automatic_clustering_history\nwhere database_name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-11T07:29:08.464941Z", "completed_at": "2025-09-11T07:29:08.470338Z"}, {"name": "execute", "started_at": "2025-09-11T07:29:08.470810Z", "completed_at": "2025-09-11T07:29:08.470817Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0068700313568115234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_finops_pro.not_null_stg_automatic_clustering_history_schema_name.60685ef67d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect schema_name\nfrom DM_AE_FINOPS_DB.STG.stg_automatic_clustering_history\nwhere schema_name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-11T07:29:08.472869Z", "completed_at": "2025-09-11T07:29:08.476640Z"}, {"name": "execute", "started_at": "2025-09-11T07:29:08.477102Z", "completed_at": "2025-09-11T07:29:08.477109Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0052106380462646484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_finops_pro.not_null_stg_automatic_clustering_history_start_time.dbb261b835", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect start_time\nfrom DM_AE_FINOPS_DB.STG.stg_automatic_clustering_history\nwhere start_time is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-11T07:29:08.479180Z", "completed_at": "2025-09-11T07:29:08.483007Z"}, {"name": "execute", "started_at": "2025-09-11T07:29:08.483472Z", "completed_at": "2025-09-11T07:29:08.483479Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00527644157409668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_finops_pro.not_null_stg_automatic_clustering_history_table_name.4d82db32fd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect table_name\nfrom DM_AE_FINOPS_DB.STG.stg_automatic_clustering_history\nwhere table_name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-11T07:29:08.485524Z", "completed_at": "2025-09-11T07:29:08.489166Z"}, {"name": "execute", "started_at": "2025-09-11T07:29:08.489636Z", "completed_at": "2025-09-11T07:29:08.489643Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005089282989501953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_finops_pro.not_null_stg_warehouse_events_history_event_ts.6e57eb9a4c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_ts\nfrom DM_AE_FINOPS_DB.STG.stg_warehouse_events_history\nwhere event_ts is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-11T07:29:08.491716Z", "completed_at": "2025-09-11T07:29:08.495463Z"}, {"name": "execute", "started_at": "2025-09-11T07:29:08.495909Z", "completed_at": "2025-09-11T07:29:08.495916Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005183219909667969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_finops_pro.not_null_stg_warehouse_events_history_event_type.d89554bf56", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_type\nfrom DM_AE_FINOPS_DB.STG.stg_warehouse_events_history\nwhere event_type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-11T07:29:08.497986Z", "completed_at": "2025-09-11T07:29:08.501013Z"}, {"name": "execute", "started_at": "2025-09-11T07:29:08.501481Z", "completed_at": "2025-09-11T07:29:08.501488Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004506111145019531, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowflake_finops.dim_department", "compiled": true, "compiled_code": "\n\nselect\n    upper(trim(warehouse_name)) as warehouse_name,\n    trim(department) as department\nfrom DM_AE_FINOPS_DB.STG.department_mapping", "relation_name": "DM_AE_FINOPS_DB.STG.dim_department", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-11T07:29:08.503530Z", "completed_at": "2025-09-11T07:29:08.506723Z"}, {"name": "execute", "started_at": "2025-09-11T07:29:08.507170Z", "completed_at": "2025-09-11T07:29:08.507177Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0046083927154541016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowflake_finops.metering_overlay", "compiled": true, "compiled_code": "\n\nwith base as (\n  select\n    to_timestamp_ntz(START_TIME) as START_TIME,\n    to_timestamp_ntz(END_TIME)   as END_TIME,\n    WAREHOUSE_NAME,\n    TOTAL_CREDITS_USED,\n    TOTAL_COST_USD\n  from DM_AE_FINOPS_DB.STG.metering_demo_seed\n),\n\n-- derive a stable synthetic warehouse_id and split credits\naug as (\n  select\n    START_TIME,\n    END_TIME,\n    WAREHOUSE_NAME,\n\n    -- deterministic id per warehouse name\n    dense_rank() over (order by WAREHOUSE_NAME)           as WAREHOUSE_ID,\n\n    -- split credits into compute/cloud-services (95/5)\n    TOTAL_CREDITS_USED                                    as CREDITS_USED,\n    round(TOTAL_CREDITS_USED * 0.95, 3)                   as CREDITS_USED_COMPUTE,\n    round(TOTAL_CREDITS_USED * 0.05, 3)                   as CREDITS_USED_CLOUD_SERVICES,\n\n    -- AU has credit columns; total_cost is re-derived downstream from cost_per_credit\n    TOTAL_COST_USD                                        as TOTAL_COST\n  from base\n)\n\nselect * from aug", "relation_name": "DM_AE_FINOPS_DB.DEMO.WAREHOUSE_METERING_HISTORY", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-11T07:29:08.509229Z", "completed_at": "2025-09-11T07:29:08.514683Z"}, {"name": "execute", "started_at": "2025-09-11T07:29:08.515126Z", "completed_at": "2025-09-11T07:29:08.515133Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006875753402709961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowflake_finops.fct_daily_costs", "compiled": true, "compiled_code": "\n\nwith compute_costs as (\n    select\n        usage_date,\n        warehouse_name,\n\n        -- Rollups from authoritative hourly costs\n        sum(total_credits_used)         as compute_credits,\n        sum(compute_cost_usd)           as compute_cost,\n        sum(cloud_services_cost_usd)    as cloud_services_cost,\n        sum(total_cost_usd)             as total_cost,\n\n        -- Existing signals\n        sum(idle_cost_usd)              as idle_cost,\n        sum(queries_executed)           as total_queries,\n        avg(unique_users)               as avg_concurrent_users\n    from DM_AE_FINOPS_DB.STG.int_hourly_compute_costs\n    group by 1, 2\n),\n\ndaily_summary as (\n    select\n        -- Contract-friendly explicit types\n        usage_date::date                                   as usage_date,\n        warehouse_name::varchar                            as warehouse_name,\n\n        compute_credits::number(38,3)                      as compute_credits,\n        compute_cost::number(38,2)                         as compute_cost,\n        cloud_services_cost::number(38,2)                  as cloud_services_cost,\n        total_cost::number(38,2)                           as total_cost,\n\n        idle_cost::number(38,2)                            as idle_cost,\n        (compute_cost - idle_cost)::number(38,2)           as productive_cost,\n\n        total_queries::number(38,0)                        as total_queries,\n        avg_concurrent_users::number(38,2)                 as avg_concurrent_users,\n\n        case when total_queries > 0\n             then (compute_cost / nullif(total_queries,0))::number(38,4)\n        end                                                as cost_per_query,\n\n        case when compute_cost > 0\n             then (100 * (1 - (idle_cost / nullif(compute_cost,0))))::number(5,2)\n             else 100::number(5,2)\n        end                                                as efficiency_score,\n\n        -- Use TOTAL for running/MA signals (holistic)\n        sum(total_cost) over (\n            partition by date_trunc('month', usage_date), warehouse_name\n            order by usage_date\n        )::number(38,2)                                    as month_to_date_cost,\n\n        avg(total_cost) over (\n            partition by warehouse_name\n            order by usage_date\n            rows between 6 preceding and current row\n        )::number(38,2)                                    as cost_7day_avg,\n\n        (total_cost - lag(total_cost, 1) over (\n            partition by warehouse_name order by usage_date\n        ))::number(38,2)                                   as day_over_day_change,\n\n        (total_cost - lag(total_cost, 7) over (\n            partition by warehouse_name order by usage_date\n        ))::number(38,2)                                   as week_over_week_change\n\n    from compute_costs\n)\n\nselect\n    *,\n    md5(cast(coalesce(cast(usage_date as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(warehouse_name as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as daily_cost_key,\n    cast(current_timestamp() as timestamp_ntz) as _loaded_at\nfrom daily_summary", "relation_name": "DM_AE_FINOPS_DB.STG.fct_daily_costs", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-11T07:29:08.517501Z", "completed_at": "2025-09-11T07:29:08.521959Z"}, {"name": "execute", "started_at": "2025-09-11T07:29:08.522434Z", "completed_at": "2025-09-11T07:29:08.522442Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005997896194458008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowflake_finops_pro.int_query_cost_attribution", "compiled": true, "compiled_code": "\n\n-- IMPORTANT: Estimated attribution only (for analysis). Billing truth is metering history.\n\nwith queries as (\n    select\n        query_id,\n        warehouse_name,\n        user_name,\n        role_name,\n        database_name,\n        query_type,\n        START_TIME as query_start_time,\n        END_TIME   as query_end_time,\n        date_trunc('hour', START_TIME) as usage_hour,\n        total_elapsed_seconds,\n        gb_scanned,\n        rows_produced,\n        runtime_category\n    from DM_AE_FINOPS_DB.STG.stg_query_history\n    \n      where date(END_TIME) >= (\n        select coalesce(max(date(t.query_end_time)), '1900-01-01'::date)\n        from DM_AE_FINOPS_DB.STG.int_query_cost_attribution as t\n      )\n    \n),\n\nhourly_costs as (\n    select * from DM_AE_FINOPS_DB.STG.int_hourly_compute_costs\n),\n\nquery_share as (\n    select\n        q.*,\n        sum(q.total_elapsed_seconds) over (\n            partition by q.warehouse_name, q.usage_hour\n        ) as hour_total_runtime,\n        case \n            when sum(q.total_elapsed_seconds) over (partition by q.warehouse_name, q.usage_hour) > 0\n            then q.total_elapsed_seconds \n                 / sum(q.total_elapsed_seconds) over (partition by q.warehouse_name, q.usage_hour)\n            else 0\n        end as runtime_share_of_hour\n    from queries q\n),\n\nattributed_costs as (\n    select\n        qs.*,\n        hc.total_cost_usd     as warehouse_hour_cost,\n        hc.total_credits_used as warehouse_hour_credits,\n\n        -- Estimated attribution based on runtime share\n        round(hc.total_cost_usd     * qs.runtime_share_of_hour, 4) as estimated_query_cost_usd,\n        round(hc.total_credits_used * qs.runtime_share_of_hour, 6) as estimated_query_credits,\n\n        case when qs.gb_scanned    > 0 then round((hc.total_cost_usd * qs.runtime_share_of_hour) / qs.gb_scanned, 4) end as estimated_cost_per_gb,\n        case when qs.rows_produced > 0 then round((hc.total_cost_usd * qs.runtime_share_of_hour) / qs.rows_produced * 1000000, 6) end as estimated_cost_per_million_rows,\n\n        current_timestamp() as _loaded_at\n    from query_share qs\n    left join hourly_costs hc\n      on qs.warehouse_name = hc.warehouse_name\n     and qs.usage_hour     = hc.hour_start\n)\n\nselect * \nfrom attributed_costs\nwhere estimated_query_cost_usd > 0", "relation_name": "DM_AE_FINOPS_DB.STG.int_query_cost_attribution", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-11T07:29:08.524621Z", "completed_at": "2025-09-11T07:29:08.528901Z"}, {"name": "execute", "started_at": "2025-09-11T07:29:08.529345Z", "completed_at": "2025-09-11T07:29:08.529367Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005758523941040039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowflake_finops_pro.int_warehouse_optimization", "compiled": true, "compiled_code": "\n\n-- Pro Pack candidate analysis: informational only (ESTIMATES / CANDIDATES).\n\nwith hourly_patterns as (\n    select\n        warehouse_name,\n        usage_date,\n        hour_start,\n        total_cost_usd,\n        queries_executed,\n        unique_users,\n        is_potentially_idle,\n        idle_cost_usd\n    from DM_AE_FINOPS_DB.STG.int_hourly_compute_costs\n    where usage_date >= dateadd('day', - ( 30 )::int, current_date())\n),\n\ndaily_summary as (\n    select\n        warehouse_name,\n        usage_date,\n        sum(total_cost_usd) as daily_cost,\n        sum(queries_executed) as daily_queries,\n        sum(case when is_potentially_idle then 1 else 0 end) as idle_hours,\n        sum(idle_cost_usd) as daily_idle_cost,\n        max(unique_users) as max_concurrent_users\n    from hourly_patterns\n    group by 1, 2\n),\n\nwarehouse_analysis as (\n    select\n        warehouse_name,\n\n        -- Cost metrics\n        avg(daily_cost)        as avg_daily_cost,\n        sum(daily_cost)        as total_period_cost,\n        avg(daily_idle_cost)   as avg_daily_idle_cost,\n        sum(daily_idle_cost)   as total_idle_cost,\n\n        -- Usage patterns\n        avg(daily_queries)     as avg_daily_queries,\n        avg(idle_hours)        as avg_idle_hours_per_day,\n        max(max_concurrent_users) as peak_concurrent_users,\n\n        -- Idle $ share (0..100)\n        case when sum(daily_cost) > 0\n             then 100.0 * sum(daily_idle_cost) / sum(daily_cost)\n             else 0 end         as idle_cost_percentage,\n\n        -- Activity windows\n        count(distinct case when daily_queries > 0 then usage_date end) as active_days,\n        count(distinct usage_date) as total_days,\n\n        -- Weekend vs weekday patterns\n        avg(case when dayofweek(usage_date) in (0, 6) then daily_cost end)         as avg_weekend_cost,\n        avg(case when dayofweek(usage_date) not in (0, 6) then daily_cost end)     as avg_weekday_cost\n\n    from daily_summary\n    group by 1\n),\n\noptimization_recommendations as (\n    select\n        warehouse_name,\n        avg_daily_cost,\n        avg_daily_idle_cost,\n        idle_cost_percentage,\n        avg_daily_queries,\n        avg_idle_hours_per_day,\n        peak_concurrent_users,\n        active_days,\n        total_days,\n\n        -- Auto-suspend recommendation\n        case\n            when avg_idle_hours_per_day > 12 then 60\n            when avg_idle_hours_per_day >  6 then 300\n            else 600\n        end as recommended_auto_suspend_seconds,\n\n        -- Schedule recommendation\n        case\n            when avg_weekend_cost < avg_weekday_cost * 0.1 then 'Consider suspending on weekends'\n            when active_days < total_days * 0.5 then 'Consider scheduled suspension'\n            else 'Current schedule appears appropriate'\n        end as schedule_recommendation,\n\n        -- Sizing recommendation (conservative)\n        case\n            when peak_concurrent_users <= 2 and avg_daily_queries < 100 then 'Consider downsizing'\n            when peak_concurrent_users > 10 and avg_idle_hours_per_day < 2 then 'Consider upsizing'\n            else 'Current size appears appropriate'\n        end as sizing_recommendation,\n\n        -- ESTIMATE at current behavior (not savings)\n        avg_daily_idle_cost * 30 as estimated_monthly_idle_cost_usd,\n\n        -- Priority score\n        case\n            when avg_daily_idle_cost > 50 then 100\n            when avg_daily_idle_cost > 20 then 80\n            when idle_cost_percentage > 30 then 60\n            when idle_cost_percentage > 20 then 40\n            else 20\n        end as optimization_priority\n\n    from warehouse_analysis\n    where\n      avg_daily_cost >= 5\n      and (idle_cost_percentage / 100.0) >= 0.25\n)\n\nselect *\nfrom optimization_recommendations\norder by optimization_priority desc, estimated_monthly_idle_cost_usd desc", "relation_name": "DM_AE_FINOPS_DB.STG.int_warehouse_optimization", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-11T07:29:08.531546Z", "completed_at": "2025-09-11T07:29:08.534785Z"}, {"name": "execute", "started_at": "2025-09-11T07:29:08.535229Z", "completed_at": "2025-09-11T07:29:08.535236Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004677772521972656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowflake_finops.fct_budget_vs_actual", "compiled": true, "compiled_code": "\n\nselect\n    b.date as usage_date,\n    b.budget_usd,\n    coalesce(f.total_cost, 0) as actual_cost_usd\nfrom DM_AE_FINOPS_DB.STG.budget_daily b\nleft join (\n    select usage_date, sum(compute_cost + idle_cost) as total_cost\n    from DM_AE_FINOPS_DB.STG.fct_daily_costs\n    group by 1\n) f\n  on f.usage_date = b.date\norder by 1", "relation_name": "DM_AE_FINOPS_DB.STG.fct_budget_vs_actual", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-11T07:29:08.537305Z", "completed_at": "2025-09-11T07:29:08.540619Z"}, {"name": "execute", "started_at": "2025-09-11T07:29:08.541061Z", "completed_at": "2025-09-11T07:29:08.541067Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004753589630126953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowflake_finops.fct_cost_by_department", "compiled": true, "compiled_code": "\n\nwith base as (\n    select\n        f.usage_date,\n        coalesce(nullif(trim(m.department), ''), 'Unassigned') as department,\n        f.warehouse_name,\n        f.compute_cost as compute_cost_usd,\n        f.idle_cost     as idle_cost_usd,\n        (f.compute_cost + f.idle_cost) as total_cost_usd\n    from DM_AE_FINOPS_DB.STG.fct_daily_costs f\n    left join DM_AE_FINOPS_DB.STG.department_mapping m\n      on upper(f.warehouse_name) = upper(m.warehouse_name)\n)\nselect\n    usage_date,\n    department,\n    sum(compute_cost_usd) as compute_cost_usd,\n    sum(idle_cost_usd)    as idle_cost_usd,\n    sum(total_cost_usd)   as total_cost_usd\nfrom base\ngroup by 1, 2", "relation_name": "DM_AE_FINOPS_DB.STG.fct_cost_by_department", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-11T07:29:08.543118Z", "completed_at": "2025-09-11T07:29:08.546129Z"}, {"name": "execute", "started_at": "2025-09-11T07:29:08.546600Z", "completed_at": "2025-09-11T07:29:08.546607Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004458427429199219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowflake_finops.fct_cost_trend", "compiled": true, "compiled_code": "\n\nselect\n    usage_date,\n    sum(compute_cost) as compute_cost_usd,\n    sum(idle_cost)    as idle_cost_usd,\n    sum(compute_cost + idle_cost) as total_cost_usd\nfrom DM_AE_FINOPS_DB.STG.fct_daily_costs\ngroup by 1\norder by 1", "relation_name": "DM_AE_FINOPS_DB.STG.fct_cost_trend", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-11T07:29:08.548845Z", "completed_at": "2025-09-11T07:29:08.553198Z"}, {"name": "execute", "started_at": "2025-09-11T07:29:08.553684Z", "completed_at": "2025-09-11T07:29:08.553692Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005854129791259766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_finops.dbt_expectations_expect_column_values_to_be_between_fct_daily_costs_compute_cost__0.27c452adce", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and compute_cost >= 0\n)\n as expression\n\n\n    from DM_AE_FINOPS_DB.STG.fct_daily_costs\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-11T07:29:08.555833Z", "completed_at": "2025-09-11T07:29:08.562227Z"}, {"name": "execute", "started_at": "2025-09-11T07:29:08.562731Z", "completed_at": "2025-09-11T07:29:08.562739Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007918834686279297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_finops.dbt_expectations_expect_column_values_to_be_between_fct_daily_costs_idle_cost__0.63ad1ff7b4", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and idle_cost >= 0\n)\n as expression\n\n\n    from DM_AE_FINOPS_DB.STG.fct_daily_costs\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-11T07:29:08.564908Z", "completed_at": "2025-09-11T07:29:08.568850Z"}, {"name": "execute", "started_at": "2025-09-11T07:29:08.569287Z", "completed_at": "2025-09-11T07:29:08.569295Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0054187774658203125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_finops.not_null_fct_daily_costs_usage_date.a508445774", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect usage_date\nfrom DM_AE_FINOPS_DB.STG.fct_daily_costs\nwhere usage_date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-11T07:29:08.571401Z", "completed_at": "2025-09-11T07:29:08.576182Z"}, {"name": "execute", "started_at": "2025-09-11T07:29:08.576666Z", "completed_at": "2025-09-11T07:29:08.576674Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006254911422729492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_finops.relationships_fct_daily_costs_warehouse_name__warehouse_name__ref_stg_warehouse_metering_.bdcce88074", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select warehouse_name as from_field\n    from DM_AE_FINOPS_DB.STG.fct_daily_costs\n    where warehouse_name is not null\n),\n\nparent as (\n    select warehouse_name as to_field\n    from DM_AE_FINOPS_DB.STG.stg_warehouse_metering\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-11T07:29:08.578818Z", "completed_at": "2025-09-11T07:29:08.584821Z"}, {"name": "execute", "started_at": "2025-09-11T07:29:08.585274Z", "completed_at": "2025-09-11T07:29:08.585281Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007537841796875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_finops.unique_fct_daily_costs_daily_cost_key.745882193a", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    daily_cost_key as unique_field,\n    count(*) as n_records\n\nfrom DM_AE_FINOPS_DB.STG.fct_daily_costs\nwhere daily_cost_key is not null\ngroup by daily_cost_key\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-11T07:29:08.587344Z", "completed_at": "2025-09-11T07:29:08.591554Z"}, {"name": "execute", "started_at": "2025-09-11T07:29:08.592019Z", "completed_at": "2025-09-11T07:29:08.592026Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005651235580444336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_finops_pro.dbt_expectations_expect_column_values_to_be_between_int_query_cost_attribution_estimated_query_cost_usd__0__estimated_query_cost_usd_is_not_null.7c133a0741", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and estimated_query_cost_usd >= 0\n)\n as expression\n\n\n    from DM_AE_FINOPS_DB.STG.int_query_cost_attribution\n    where\n        estimated_query_cost_usd is not null\n    \n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-11T07:29:08.594187Z", "completed_at": "2025-09-11T07:29:08.598036Z"}, {"name": "execute", "started_at": "2025-09-11T07:29:08.598500Z", "completed_at": "2025-09-11T07:29:08.598507Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005376577377319336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_finops_pro.not_null_int_query_cost_attribution_estimated_query_cost_usd.cddeb54d8b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect estimated_query_cost_usd\nfrom DM_AE_FINOPS_DB.STG.int_query_cost_attribution\nwhere estimated_query_cost_usd is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-11T07:29:08.600596Z", "completed_at": "2025-09-11T07:29:08.605808Z"}, {"name": "execute", "started_at": "2025-09-11T07:29:08.606247Z", "completed_at": "2025-09-11T07:29:08.606254Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006679058074951172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_finops_pro.not_null_int_query_cost_attribution_usage_hour.05cdc55c95", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect usage_hour\nfrom DM_AE_FINOPS_DB.STG.int_query_cost_attribution\nwhere usage_hour is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-11T07:29:08.608310Z", "completed_at": "2025-09-11T07:29:08.612229Z"}, {"name": "execute", "started_at": "2025-09-11T07:29:08.612704Z", "completed_at": "2025-09-11T07:29:08.612712Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005332469940185547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.snowflake_finops_pro.optimization_summary", "compiled": true, "compiled_code": "\n\n-- Pro Pack executive summary (informational). \n-- Outputs identify candidates and estimated dollars to review; not realized savings.\n\nwith warehouse_opportunities as (\n    select\n        'Warehouse Auto-Suspend Optimization' as opportunity_type,\n        count(*) as opportunity_count,\n        -- from Pro model column\n        sum(estimated_monthly_idle_cost_usd) as estimated_monthly_cost_to_review_usd,\n        'Adjust auto-suspend settings to reduce idle time' as primary_action,\n        'Low' as implementation_difficulty,\n        'Immediate' as time_to_value\n    from DM_AE_FINOPS_DB.STG.int_warehouse_optimization\n    where recommended_auto_suspend_seconds < 600\n),\n\nexpensive_queries as (\n    select\n        'Expensive Query Optimization' as opportunity_type,\n        count(distinct query_id) as opportunity_count,\n        -- simple month proxy for visibility; still an estimate\n        sum(estimated_query_cost_usd) * 30 as estimated_monthly_cost_to_review_usd,\n        'Optimize query patterns and add filters' as primary_action,\n        'Medium' as implementation_difficulty,\n        '1-2 weeks' as time_to_value\n    from DM_AE_FINOPS_DB.STG.int_query_cost_attribution\n    where estimated_query_cost_usd > 1\n)\n\nselect * from warehouse_opportunities\nunion all\nselect * from expensive_queries", "relation_name": "DM_AE_FINOPS_DB.STG.optimization_summary", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-11T07:29:08.615107Z", "completed_at": "2025-09-11T07:29:08.619134Z"}, {"name": "execute", "started_at": "2025-09-11T07:29:08.619607Z", "completed_at": "2025-09-11T07:29:08.619614Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0058400630950927734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_finops_pro.dbt_expectations_expect_column_values_to_be_between_int_warehouse_optimization_idle_cost_percentage__100_001__0__idle_cost_percentage_is_not_null.59de2b01e6", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and idle_cost_percentage >= 0 and idle_cost_percentage <= 100.001\n)\n as expression\n\n\n    from DM_AE_FINOPS_DB.STG.int_warehouse_optimization\n    where\n        idle_cost_percentage is not null\n    \n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-11T07:29:08.621747Z", "completed_at": "2025-09-11T07:29:08.625838Z"}, {"name": "execute", "started_at": "2025-09-11T07:29:08.626297Z", "completed_at": "2025-09-11T07:29:08.626304Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005568981170654297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_finops_pro.dbt_expectations_expect_column_values_to_be_between_optimization_summary_estimated_monthly_cost_to_review_usd__0.fa0157abc9", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and estimated_monthly_cost_to_review_usd >= 0\n)\n as expression\n\n\n    from DM_AE_FINOPS_DB.STG.optimization_summary\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-11T07:29:08.628450Z", "completed_at": "2025-09-11T07:29:08.632671Z"}, {"name": "execute", "started_at": "2025-09-11T07:29:08.633126Z", "completed_at": "2025-09-11T07:29:08.633133Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005695819854736328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_finops_pro.dbt_expectations_expect_column_values_to_be_between_optimization_summary_opportunity_count__0.857744251f", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n( 1=1 and opportunity_count >= 0\n)\n as expression\n\n\n    from DM_AE_FINOPS_DB.STG.optimization_summary\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-11T07:29:08.635249Z", "completed_at": "2025-09-11T07:29:08.639432Z"}, {"name": "execute", "started_at": "2025-09-11T07:29:08.639886Z", "completed_at": "2025-09-11T07:29:08.639893Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005640745162963867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_finops_pro.dbt_utils_unique_combination_of_columns_optimization_summary_opportunity_type.bb8eb9b0d7", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        opportunity_type\n    from DM_AE_FINOPS_DB.STG.optimization_summary\n    group by opportunity_type\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-11T07:29:08.641989Z", "completed_at": "2025-09-11T07:29:08.645934Z"}, {"name": "execute", "started_at": "2025-09-11T07:29:08.646395Z", "completed_at": "2025-09-11T07:29:08.646403Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005419015884399414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_finops_pro.not_null_optimization_summary_implementation_difficulty.cb575088fe", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect implementation_difficulty\nfrom DM_AE_FINOPS_DB.STG.optimization_summary\nwhere implementation_difficulty is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-11T07:29:08.648498Z", "completed_at": "2025-09-11T07:29:08.653905Z"}, {"name": "execute", "started_at": "2025-09-11T07:29:08.654350Z", "completed_at": "2025-09-11T07:29:08.654373Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006864786148071289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_finops_pro.not_null_optimization_summary_opportunity_type.a201cc6956", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect opportunity_type\nfrom DM_AE_FINOPS_DB.STG.optimization_summary\nwhere opportunity_type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-11T07:29:08.656424Z", "completed_at": "2025-09-11T07:29:08.660172Z"}, {"name": "execute", "started_at": "2025-09-11T07:29:08.660633Z", "completed_at": "2025-09-11T07:29:08.660640Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005190610885620117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_finops_pro.not_null_optimization_summary_primary_action.78c6a8d3c4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect primary_action\nfrom DM_AE_FINOPS_DB.STG.optimization_summary\nwhere primary_action is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-09-11T07:29:08.662686Z", "completed_at": "2025-09-11T07:29:08.666521Z"}, {"name": "execute", "started_at": "2025-09-11T07:29:08.666970Z", "completed_at": "2025-09-11T07:29:08.666977Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005259513854980469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.snowflake_finops_pro.not_null_optimization_summary_time_to_value.ce87d301cf", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect time_to_value\nfrom DM_AE_FINOPS_DB.STG.optimization_summary\nwhere time_to_value is null\n\n\n", "relation_name": null, "batch_results": null}], "elapsed_time": 2.0928733348846436, "args": {"vars": {"enable_pro_pack": true, "DEMO_MODE": false, "snowflake_finops_pro": {"enable_pro_pack": true}}, "cache_selected_only": false, "static": false, "populate_cache": true, "log_path": "/home/runner/work/finops-dbt/finops-dbt/logs", "use_colors": true, "version_check": true, "require_yaml_configuration_for_mf_time_spines": false, "send_anonymous_usage_stats": true, "empty_catalog": false, "warn_error_options": {"error": [], "warn": [], "silence": []}, "exclude": [], "require_all_warnings_handled_by_warn_error": false, "upload_to_artifacts_ingest_api": false, "require_nested_cumulative_type_params": false, "require_batched_execution_for_custom_microbatch_strategy": false, "macro_debugging": false, "print": true, "skip_nodes_if_on_run_start_fails": false, "require_generic_test_arguments_property": true, "partial_parse": true, "source_freshness_run_project_hooks": true, "show_resource_report": false, "state_modified_compare_more_unrendered_values": false, "static_parser": true, "which": "generate", "log_format": "default", "compile": true, "strict_mode": false, "use_colors_file": true, "use_fast_test_edges": false, "printer_width": 80, "validate_macro_args": false, "log_level": "info", "quiet": false, "project_dir": "/home/runner/work/finops-dbt/finops-dbt", "invocation_command": "dbt docs generate --target-path target/pro --vars {enable_pro_pack: true, DEMO_MODE: false, snowflake_finops_pro: {enable_pro_pack: true}}", "log_format_file": "debug", "partial_parse_file_diff": true, "state_modified_compare_vars": false, "select": [], "introspect": true, "log_level_file": "debug", "target_path": "target/pro", "show_all_deprecations": false, "require_explicit_package_overrides_for_builtin_materializations": true, "require_resource_names_without_spaces": true, "write_json": true, "log_file_max_bytes": 10485760, "defer": false, "favor_state": false, "profiles_dir": "./.ci/profiles", "indirect_selection": "eager"}}